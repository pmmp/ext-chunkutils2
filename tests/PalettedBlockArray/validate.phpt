--TEST--
Test that validating palette offsets works correctly in PalettedBlockArray::fromData()
--DESCRIPTION--
In certain cases (when the palette is not full) it's possible for offsets in the array to point at indices in the palette which aren't set.
For example, a 3 bpb palette can hold up to 8 unique blocks, but if only 7 are used, an `8` appearing in the offset table is bogus and should be reported as corruption.
This test verifies some known valid and invalid cases to ensure that corruption is detected only where expected.
--EXTENSIONS--
chunkutils2
--FILE--
<?php

namespace pocketmine\world\format;

$samples = [
	[
		3,
		base64_decode('AAAAEQIAAAAAEAkAAAAAAJEAAAAAAERCAAAAQEAkAAAAAABRAgAAAAAQCQAAAAAAkQAAAAAARMIAAADAQCQAAAAAABECAAAAABAJAAAAAACRAAAAAABEAgAAAABAJAAAAAAAEQIAAAAAEAkAAAAAAJEAAAAAAEQCAAAAAEAkAAAAAAARAgAAAAAQCQAAAAAAkQAAAAAARAIAAAAAQCQAAAAAABECAAAAABAJAAAAAECRAAAAAABEggAAAABAJABAAAAAEQIAAAAAEAkAAAAAAJEAAAAAAEQCAAAAAEAkAAAAAAARAgAAAAAQCQAAAAAAkQAAAAAARAIAAAAAQCQAAAAAABECAAAAABAJAAAAAACRAAAAAABEAgAAAABAJAAAAAAAEQIAAAAAEAkAAAAAQJEAAAAAAESCAAAAAEAkAEAAAAARAgAAAAAQCQAAAAAAkQAAAAAARAIAAAAAQCQAAAAAABECAAAAABAJAAAAAACRAAAAAABEAgAAAABAJAAAAAAAEQIAAAAAEAkAAAAAAJEAAAAAAEQCAAAAAEAkAAAAAAARAgAAAAAQCQAAAABAkQAAAAAARIIAAAAAQCQAQAAAABECAAAAABAJAAAAAACRAAAAAABEAgAAAABAJAAAAAAAEQIAAAAAEAkAAAAAAJEAAAAAAEQCAAAAAEAkAAAAAAARAgAAAAAQCQAAAAAAkQAAAAAARAIAAAAAQCQAAAAAABECAAAAABAJAAAAAACRAABAAABEAgAAAEBAJABAAAAAUQIAAAAAEAlAAAAAAJEAAAAAAEQCAAAAAEAkAAAAAABRAgAAQAAQCUAAAAAAkQAAQAAAREIAAAAAQCQAQAAAABECAAAAABAJQAAAAACRAAAAAABEQgAAAEBAJABAAAAAUQIAAEAAEAlAAAAAQJEAAAAAAERCAAAAAEAkAAAAAAARAgAAAAAQCQAAAABAkQAAQAAAREIAAAAAQCQAQAAAABECAABAABAJAAAAAACRAAAAAABEAgAAAABAJABAAAAAUQIAAEAAEAkAAAAAQJEAAEAAAERCAAAAAEAkAEAAAAARAgAAAAAQCUAAAAAAkQAAQAAAREIAAABAQCQAQAAAAFECAAAAABAJQAAAAACRAAAAAABEQgAAAABAJAAAAAAAUQIAAEAAEAlAAAAAQJEAAEAAAERCAAAAQEAkAEAAAAARAgAAQAAQCQAAAAAAkQAAQAAARAIAAAAAQCQAQAAAAFECAABAABAJQAAAAECRAABAAABEAgAAAEBAJAAAAAAAEQIAAEAAEAkAAAAAAJEAAEAAAERCAAAAQEAkAEAAAABRAgAAQAAQCUAAAAAAkQAAQAAARAIAAAAAQCQAAAAAABECAAAAABAJQAAAAECRAABAAABEAgAAAEBAJABAAAAAUQIAAEAAEAlAAAAAAJEAAEAAAEQCAAAAAEAkAEAAAAARAgAAQAAQCUAAAABAkQAAQAAAREIAAAAAQCQAQAAAABECAAAAABAJAAAAAACRAAAAAABEQgAAAEBAJABAAAAAEQIAAEAAEAkAAAAAQJEAAAAAAEQCAAAAAEAkAAAAAAARAgAAQAAQCUAAAABAkQAAAAAAREIAAABAQCQAQAAAAFECAAAAABAJQAAAAADACAAAAAAAYwAAAAAAMAIAAAAAQCMAAEAAAIxAAAAAQMAIAEAAAABjAAAAQAAwAkAAAAAAIwAAQAAAjEAAAAAAwAgAQAAAACMAAAAAADACQAAAAAAjAABAAACMQAAAAEDACABAAAAAYwAAAEAAMAJAAAAAQCMAAEAAAIwAAAAAQMAIAAAAAAAjAAAAQAAwAgAAAABAIwAAQAAAjEAAAABAwAgAQAAAAGMAAABAADACAAAAAEAjAAAAAACMAAAAAADACAAAAAAAIwAAAEAAMAJAAAAAQCMAAAAAAIwAAAAAQMAIAEAAAAAjAAAAQAAwAgAAAAAAIwAAQAAAjAAAAABAwAgAQAAAAGMAAAAAADACQAAAAAAjAAAAAACMQAAAAADACAAAAAAAYwAAAAAAMAJAAAAAQCMAAEAAAIxAAAAAAMAIAEAAAAAjAAAAAAAwAkAAAAAAIwAAAAAAjEAAAAAAwAgAQAAAAGMAAABAADACQAAAAAAjAABAAACMAAAAAADACABAAAAAIwAAAAAAMAJAAAAAACMAbGU=', true),
		[0, 1, 2, 3, 4]
	]
];

foreach($samples as $k => $values){
	try{
		PalettedBlockArray::fromData($values[0], $values[1], $values[2]);
		echo "$k not corrupted\n";
	}catch(PalettedBlockArrayLoadException $e){
		echo "$k " . $e->getMessage() . "\n";
	}
}
?>
--EXPECT--
0 not corrupted